---
# This playbook will prepare the staging directories and retrieve the automation resources for the
# autodeploynode. The resources will be staged locally in the /opt/autodeploy/projects/ and
# opt/autodeploy/resources/ directories.

- name: Stage DCAF automation resources on autodeploynode
  gather_facts: true
  hosts: localhost
  vars:
    resource_dirs:
      - docker
      - ISO
      - packages
      - rpms
      - scaleio
    autodeploy_base_path: /opt/autodeploy
    docker_api_version: "1.20"
    docker_path: "{{ resources_base_path }}/docker/"
    iso_path: "{{ resources_base_path }}/ISO/"
    packages_path: "{{ resources_base_path }}/packages/"
    projects_base_path: "{{ autodeploy_base_path }}/projects"
    resources_base_path: "{{ autodeploy_base_path }}/resources"
    scaleio_path: "{{ resources_base_path }}/scaleio/"
    autodeploy_support_pkgs:
      - ipmitool
      - docker
      - ntp
      - python-netaddr
      - python-passlib
      - python-pip
      - sshpass
      - unzip
      - vim
      - wget
      - yum-utils
      - openssl-devel
      - glibc.i686

  tasks:
    - name: Install epel
      yum:
        pkg: epel-release
        state: present


    - name: Install required support packages
      yum:
        pkg: "{{ item }}"
        state: present
      with_items: "{{ autodeploy_support_pkgs }}"
      tags: pkgs

    - name: Install required pip-based support packages
      pip:
        name: "{{ item }}"
        state: present
      with_items:
        - docker-py

    - name: Create the staging directories in /opt/autodeploy
      file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "{{ projects_base_path }}"
        - "{{ resources_base_path }}"
      tags: paths

    - name: Create the resource directories in the staging directories
      file:
        path: "{{ resources_base_path }}/{{ item }}"
        state: directory
      with_items: "{{ resource_dirs }}"
      tags: paths

#    - name: Clone the project repos from Git
#      git:
#        repo: "{{ item.repo }}"
#        dest: "{{ projects_base_path }}/{{ item.name }}"
#        accept_hostkey: yes
#        key_file: "{{ github_key_file }}"
#      with_items: "{{ git_repos }}"
#      ignore_errors: true
#
#    - name: Checkout the latest tagged version
#      shell: "git checkout $(git describe --abbrev=0 --tags)"
#      args:
#        chdir: "{{ projects_base_path }}/{{ item.name }}"
#      with_items: "{{ git_repos }}"
