allow bootp;
allow booting;

# Disable ProxyDHCP, we're in control of the primary DHCP server
option ipxe.no-pxedhcp 1;

# ipxe.comboot is required for ESXi and lets make sure our ROM has it enabled before proceeding
#
if exists ipxe.http and exists ipxe.menu and ( (exists ipxe.pxe and exists ipxe.comboot) or (exists ipxe.efi) ) {
    filename "{{ hanlon_ipxe }}";
}
elsif exists user-class and option user-class = "iPXE" {
    # We're already using iPXE, but not a feature-full version,
    # and possibly an out-of-date version from ROM, so load a more
    # complete version with native drivers
    # Allow both legacy BIOS and EFI architectures
    if option arch = 00:06 {
        filename "{{ ipxe_efi_x86_rom }}";
    } elsif option arch = 00:07 {
        filename "{{ ipxe_efi_x64_rom }}";
    } elsif option arch = 00:00 {
        filename "{{ ipxe_legacy_rom }}";
    }
}
elsif option arch = 00:06 {
    # EFI 32-bit
    # I like to use iPXE-provided drivers, so therefore give ipxe.efi
    # to all non-iPXE clients, use snponly.efi if you have unsupported
    # or misbehaving NICs
    filename "{{ ipxe_efi_x86_rom }}";
}
elsif option arch = 00:07 {
    # EFI 64-bit
    # I like to use iPXE-provided drivers, so therefore give ipxe.efi
    # to all non-iPXE clients, use snponly.efi if you have unsupported
    # or misbehaving NICs
    filename "{{ ipxe_efi_x64_rom }}";
}
elsif option arch = 00:00 {
    # Legacy BIOS x86 mode
    # I like to use iPXE-provided drivers, so therefore give ipxe.pxe
    # to all non-iPXE clients, use undionly.kpxe if you have unsupported
    # or misbehaving NICs
    filename "{{ ipxe_legacy_rom }}";
    #filename "undionly.kpxe";
}
else {
    # Unsupported client architecture type, so do nothing
}
